'''
Test PSF simulation.

Compare the simulation generated by *psfmodels* to the result obtained using
ray tracing model.

TODO Update to use the current light sheet analysis functions.

Ray tracing units are mm, propagation units are um.
06/21/2023
Steven Sheppard
'''
from pathlib import Path
import matplotlib.pyplot as plt
import psfmodels as psfm

import numpy as np
import model_tools.propagation as pt
import model_tools.raytrace as rt
import model_tools.analytic_forms as af
from model_tools.analysis import analyze_lightsheet_zx


root_dir = Path('/home/steven/Documents/qi2lab/github/raytracing_sjs/data')
save_dir = Path('psf_simulation_comparison')
savedir = rt.get_unique_dir(root_dir, save_dir)

showfig = False
verify_energy_conservation = False

#------------------------------------------------------------------------------#
# Setup parameters
# Setup for propagation
wl = 0.000561
ko = 2 * np.pi / wl
initial_propagation_diameter = 0.350
propagation_length = 0.100
dx = wl / 2
dz = wl * 4
n_xy = int(initial_propagation_diameter // dx)
n_zx = int(propagation_length // dz)

# Check if n_grid is odd
if n_xy%2 == 0:
    n_xy += 1
if n_zx%2 == 0:
    n_zx += 1

# objective parameters
na=0.14
f = 40

# estimated parameters based on paraxial gaussian equation
best_waist = af.gauss_waist(wl=wl, ri=1.0, na=na)
best_length = 2 * af.gauss_rayleigh(wl=wl, na=na)

# setup a dictionary of function arguements for fitting the light sheet.
analysis_params = {"max_peak_ratio":0.1/3,
                   "peak_height_ratio":0.2,
                   "peak_distance":5,
                   "z_window":1,
                   "w_window":1,
                   "w_filter":[0.5 * best_waist, 10],
                   "mu_filter": 0.1,
                   "plot_results":True,
                   "DEBUG_zstack":True,
                   "DEBUG_fits":False,
                   "showfig":showfig}

#----------------------------------------------------------------------------------------
# get psfmodels result
# Prepare electric field grid
grid, grid_params = pt.field_grid(num_xy=n_xy, num_zx=n_zx, dx=dx, dz=dz)
x, radius_xy, extent_xy, z, extent_zx = grid_params

psf_psfmodels = psfm.make_psf(z=z * 1e3,
                              nx=n_xy,
                              dxy=dx * 1e3,
                              wvl=wl * 1e3,
                              NA=na,
                              ns=1.0,
                              ni=1.0,
                              ni0=1.0,
                              tg=1.0,
                              tg0=1.0,
                              ng=1.0,
                              ng0=1.0,
                              ti0=f * 1e3,
                              oversample_factor=3,
                              model="scalar")

ls_analysis_psf = analyze_lightsheet_zx(data=psf_psfmodels[:, n_xy//2, n_xy//2-100:n_xy//2+100],
                                        dx=dx * 1e3,
                                        dz=np.abs(dz) * 1e3,
                                        max_peak_ratio=analysis_params["max_peak_ratio"],
                                        peak_height_ratio=analysis_params["peak_height_ratio"],
                                        peak_distance=analysis_params["peak_distance"],
                                        z_window=analysis_params["z_window"],
                                        w_window=analysis_params["w_window"],
                                        w_filter = analysis_params["w_filter"],
                                        mu_filter = analysis_params["mu_filter"],
                                        plot_results=analysis_params["plot_results"],
                                        DEBUG_zstack=analysis_params["DEBUG_zstack"],
                                        DEBUG_fits=analysis_params["DEBUG_fits"],
                                        showfig=analysis_params["showfig"],
                                        savedir=savedir,
                                        filename_label='psfmodels_analysis')

#------------------------------------------------------------------------------#
# simulate psf
# generate rays
rays = rt.create_rays(type='flat_top',
                      source='infinity',
                      n_rays=1e6,
                      diameter=f * na * 2.0)

# Create objective
obj = rt.Perfect_lens(z1=f, f=f, na=na, ri_in=1.0, ri_out=1.0)

# ray trace objective
rays = obj.raytrace(rays)

# find the focal plane using ray tracing paraxial and marginal ray focii.
fp_paraxial, fp_midpoint, fp_marginal = rt.ray_focal_plane(rays=rays,
                                                           ri=1.0,
                                                           method='all')

# Prepare electric field grid
grid, grid_params = pt.field_grid(num_xy=n_xy, num_zx=n_zx, dx=dx, dz=dz)
x, radius_xy, extent_xy, z, extent_zx = grid_params

# offset z to the focal plane using paraxial focus
z_real = z + fp_paraxial

# ray trace to propagation plane
rays_to_field_z = rt.rays_to_field_plane(rays=rays,
                                           x_max=x.max(),
                                           padding=0.050)

# The propagate() takes the distance from initial field to the field plane
z_prop = z_real - rays_to_field_z

# how far is the initial field from the midpoint focus?
initial_field_distance_to_focus = fp_paraxial - rays_to_field_z

# ray trace to the rays -> field plane
rays = rt.intersect_plane(rays, rays_to_field_z, ri_in=1.0, refract=False)

# generate simulation electric field using ray trace result to electric field
initial_field_simulation = rt.rays_to_field(mask_radius=radius_xy,
                                            rays=rays,
                                            ko=ko,
                                            binning=n_xy//5,
                                            amp_type='power',
                                            phase_type='opld',
                                            results='field',
                                            power=0.01,
                                            DEBUG=True,
                                            savedir=savedir / Path('sim_psf_initial_field.png')
                                            showfig=showfig)

# Propagate the initial fields to get a 3d distribution about the focus
field_simulation = pt.get_3d_field(initial_field_simulation,
                                   z=z_real - rays_to_field_z,
                                   wl=wl,
                                   dx=dx,
                                   ri=1.0,
                                   DEBUG=False,
                                   savedir=None,
                                   showfig=showfig)

psf_simulation = np.abs(field_simulation)**2

# light sheet analysis, fit each z plane for 3 gaussian model
ls_analysis_sim = analyze_lightsheet_zx(data=psf_simulation[:, n_xy//2, n_xy//2-100:n_xy//2+100],
                                        dx=dx * 1e3,
                                        dz=np.abs(dz) * 1e3,
                                        max_peak_ratio=analysis_params["max_peak_ratio"],
                                        peak_height_ratio=analysis_params["peak_height_ratio"],
                                        peak_distance=analysis_params["peak_distance"],
                                        z_window=analysis_params["z_window"],
                                        w_window=analysis_params["w_window"],
                                        w_filter = analysis_params["w_filter"],
                                        mu_filter = analysis_params["mu_filter"],
                                        plot_results=analysis_params["plot_results"],
                                        DEBUG_zstack=analysis_params["DEBUG_zstack"],
                                        DEBUG_fits=analysis_params["DEBUG_fits"],
                                        showfig=analysis_params["showfig"],
                                        savedir=savedir,
                                        filename_label='simulation_analysis')


print(f"psfmodels: w_min={ls_analysis_psf['width']:.3f}um, l={ls_analysis_psf['length']:.3f}um",
      f"simulation: w_min={ls_analysis_sim['width']:.3f}um, l={ls_analysis_sim['length']:.3f}um")

#----------------------------------------------------------------------------------------
# Plotting
rt.plot_rays(rays=rt.intersect_optical_axis(rays, ri=1.0),
             n_rays_to_plot=101,
             optical_train = [obj],
             planes_of_interest={'rays to field':rays_to_field_z,
                                 'paraxial fp':fp_paraxial,
                                 "midpoint fp":fp_midpoint,
                                 "marginal fp":fp_marginal},
             savedir=savedir / Path(f"raytracing_obj_na_{obj.na:.2f}.png"),
             showfig=showfig,
             figsize=(15,8))

pt.plot_field(fields=[initial_field_simulation],
              field_labels=['rays to field'],
              grid_params=[grid_params],
              fig_title='Initial field ',
              gamma_scale=1.0,
              savedir=savedir / Path('initial_field.png'),
              showfig=showfig)

pt.plot_xz_projection(fields=[field_simulation, np.sqrt(psf_psfmodels)],
                      field_labels=["simulation", "psfmodels"],
                      grid_params=[grid_params],
                      gamma_scale=1.0,
                      savedir=savedir / Path('zx_projections.png'),
                      showfig=showfig)

if verify_energy_conservation:
    # Calculate the power contained in the initial field
    initial_power = pt.calc_field_power(initial_field_simulation, dx=dx)

    # Calculate the total power at each z plane
    field_simulation_power = np.array([pt.calc_field_power(field, dx=dx) for field in field_simulation])

    # Plot the energy conservation
    fig, ax=plt.subplots(1,1, figsize=(8,10))
    fig.suptitle('Test energy conservation')
    ax.set_title(f"initial field power:{initial_power:.0e}")
    ax.plot(z, field_simulation_power, 'r.', label='integrated power')
    ax.axhline(y=initial_power, label='initial field power')
    ax.set_xlabel("z (um)")
    ax.set_ylabel("Power")
    ax.legend()

    if showfig:
        plt.show()

    else:
        plt.close(fig)
